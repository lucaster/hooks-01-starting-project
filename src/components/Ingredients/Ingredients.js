import React, { useCallback, useEffect, useState } from 'react';
import { FIREBASE_DB_URL } from '../../config/secrets';
import IngredientForm from './IngredientForm';
import IngredientList from './IngredientList';
import Search from './Search';

const FIREBASE_DB_INGREDIENTS_URL = `${FIREBASE_DB_URL}/ingredients.json`;

function Ingredients() {

  const [ingredients, setIngredients] = useState([]);

  // reruns when ingregients change:
  useEffect(
    () => {
      console.log('Ingridients', 'useEffect', 'Rendering Ingredients', ingredients);
    },
    [ingredients]
  );

  const addIngredientHandler = (ingredient) => {
    fetch(FIREBASE_DB_INGREDIENTS_URL, {
      method: 'POST',
      body: JSON.stringify(ingredient),
      headers: {
        'Content-Type': 'application/json'
      }
    })
      .then(response => response.json())
      .then(responseJson => {
        // console.debug('Ingredients', 'addIngredientHandler', 'responseJson', responseJson);
        setIngredients(prev => [
          ...prev,
          {
            id: responseJson.name, // generated by Firebase
            ...ingredient
          }
        ]);
      });
  };

  const removeIngredientHandler = id => {
    fetch(`${FIREBASE_DB_URL}/ingredients/${id}.json`, {
      method: 'DELETE'
    })
      .then(() => {
        setIngredients(curr => curr.filter(ing => ing.id !== id));
      });
  };

  const ingredientsLoadedHandler = useCallback(ingredients => {
    setIngredients(ingredients);
  }, [setIngredients]);

  return (
    <div className="App">
      <IngredientForm
        onAddIngredient={addIngredientHandler}
      />

      <section>
        <Search
          onIngredientsLoaded={ingredientsLoadedHandler}
        />
        <IngredientList
          ingredients={ingredients}
          onRemoveItem={removeIngredientHandler}
        />
      </section>
    </div>
  );
}

export default Ingredients;
